{"version":3,"sources":["../src/cli/index.ts","../src/helpers/createProject.ts","../src/helpers/scaffoldProject.ts","../src/utils/consts.ts","../src/utils/parseNameAndPath.ts","../src/index.ts"],"sourcesContent":["import { Command } from \"commander\";\r\nimport inquirer from \"inquirer\";\r\nimport { createProject } from \"../helpers/createProject.js\";\r\nimport { parseNameAndPath } from \"../utils/parseNameAndPath.js\";\r\ninterface CliResults {\r\n  appName: string;\r\n}\r\nexport async function runCli() {\r\n  const program = new Command().name(\"jstack\");\r\n  program\r\n    .description(\r\n      \"A CLI to generate a nodejs project using typescript, with options for more specialized projects\"\r\n    )\r\n    // .argument(\"<project-name>\", \"Name of the project to generate\")\r\n    .parse(process.argv);\r\n\r\n  const projectName = await promptAppName();\r\n\r\n  const [appName, path] = parseNameAndPath(projectName);\r\n\r\n  createProject(appName);\r\n}\r\nconst promptAppName = async (): Promise<string> => {\r\n  const { appName } = await inquirer.prompt<Pick<CliResults, \"appName\">>({\r\n    name: \"appName\",\r\n    type: \"input\",\r\n    message: \"What will your project be called?\",\r\n    default: \"jstack\",\r\n    // validate: validateAppName,\r\n    transformer: (input: string) => {\r\n      return input.trim();\r\n    },\r\n  });\r\n\r\n  return appName;\r\n};\r\n","import path from \"path\";\r\nimport { scaffoldProject } from \"./scaffoldProject.js\";\r\n\r\nexport async function createProject(projectName: string) {\r\n  const projectDir = path.resolve(process.cwd(), projectName);\r\n\r\n  await scaffoldProject({ projectName, projectDir });\r\n}\r\n","import path from \"path\";\r\nimport { PKG_ROOT } from \"../utils/consts.js\";\r\nimport ora from \"ora\";\r\nimport fs from \"fs-extra\";\r\nimport chalk from \"chalk\";\r\nimport inquirer from \"inquirer\";\r\n\r\nexport async function scaffoldProject({\r\n  projectName,\r\n  projectDir,\r\n}: {\r\n  projectName: string;\r\n  projectDir: string;\r\n}) {\r\n  const srcDir = path.join(PKG_ROOT, \"template/base\");\r\n  //   if (!noInstall) {\r\n  //     logger.info(`\\nUsing: ${chalk.cyan.bold(pkgManager)}\\n`);\r\n  //   } else {\r\n  //     logger.info(\"\");\r\n  //   }\r\n  const spinner = ora(`Scaffolding in: ${projectDir}...\\n`).start();\r\n  if (fs.existsSync(projectDir)) {\r\n    if (fs.readdirSync(projectDir).length === 0) {\r\n      if (projectName !== \".\")\r\n        spinner.info(\r\n          `${chalk.cyan.bold(\r\n            projectName,\r\n          )} exists but is empty, continuing...\\n`,\r\n        );\r\n    } else {\r\n      spinner.stopAndPersist();\r\n      const { overwriteDir } = await inquirer.prompt<{\r\n        overwriteDir: \"abort\" | \"clear\" | \"overwrite\";\r\n      }>({\r\n        name: \"overwriteDir\",\r\n        type: \"list\",\r\n        message: `${chalk.redBright.bold(\"Warning:\")} ${chalk.cyan.bold(\r\n          projectName,\r\n        )} already exists and isn't empty. How would you like to proceed?`,\r\n        choices: [\r\n          {\r\n            name: \"Abort installation (recommended)\",\r\n            value: \"abort\",\r\n            short: \"Abort\",\r\n          },\r\n          {\r\n            name: \"Clear the directory and continue installation\",\r\n            value: \"clear\",\r\n            short: \"Clear\",\r\n          },\r\n          {\r\n            name: \"Continue installation and overwrite conflicting files\",\r\n            value: \"overwrite\",\r\n            short: \"Overwrite\",\r\n          },\r\n        ],\r\n        default: \"abort\",\r\n      });\r\n      if (overwriteDir === \"abort\") {\r\n        spinner.fail(\"Aborting installation...\");\r\n        process.exit(1);\r\n      }\r\n\r\n      const overwriteAction =\r\n        overwriteDir === \"clear\"\r\n          ? \"clear the directory\"\r\n          : \"overwrite conflicting files\";\r\n\r\n      const { confirmOverwriteDir } = await inquirer.prompt<{\r\n        confirmOverwriteDir: boolean;\r\n      }>({\r\n        name: \"confirmOverwriteDir\",\r\n        type: \"confirm\",\r\n        message: `Are you sure you want to ${overwriteAction}?`,\r\n        default: false,\r\n      });\r\n\r\n      if (!confirmOverwriteDir) {\r\n        spinner.fail(\"Aborting installation...\");\r\n        process.exit(1);\r\n      }\r\n\r\n      if (overwriteDir === \"clear\") {\r\n        spinner.info(\r\n          `Emptying ${chalk.cyan.bold(projectName)} and creating t3 app..\\n`,\r\n        );\r\n        fs.emptyDirSync(projectDir);\r\n      }\r\n    }\r\n  }\r\n  console.log(\"ðŸš€ ~ file: scaffoldProject.ts:22 ~ projectDir\", projectDir)\r\n  console.log(\"ðŸš€ ~ file: scaffoldProject.ts:22 ~ srcDir\", srcDir)\r\n  fs.copyFileSync(srcDir, projectDir);\r\n  \r\n}\r\n","import path from \"path\";\r\nimport { fileURLToPath } from \"url\";\r\n\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst distPath = path.dirname(__filename);\r\nexport const PKG_ROOT = path.join(distPath, \"../../\");\r\n","import pathModule from \"path\";\r\nexport const parseNameAndPath = (input: string) => {\r\n  const paths = input.split(\"/\");\r\n\r\n  let appName = paths[paths.length - 1];\r\n\r\n  // If the user ran `npx create-t3-app .` or similar, the appName should be the current directory\r\n  if (appName === \".\") {\r\n    const parsedCwd = pathModule.resolve(process.cwd());\r\n    appName = pathModule.basename(parsedCwd);\r\n  }\r\n\r\n  // If the first part is a @, it's a scoped package\r\n  const indexOfDelimiter = paths.findIndex((p) => p.startsWith(\"@\"));\r\n  if (paths.findIndex((p) => p.startsWith(\"@\")) !== -1) {\r\n    appName = paths.slice(indexOfDelimiter).join(\"/\");\r\n  }\r\n\r\n  const path = paths.filter((p) => !p.startsWith(\"@\")).join(\"/\");\r\n\r\n  return [appName, path] as const;\r\n};\r\n","import { runCli } from \"./cli/index.js\";\r\n\r\nasync function main() {\r\n  await runCli();\r\n}\r\n\r\nmain();\r\n"],"mappings":"AAAA,OAAS,WAAAA,MAAe,YACxB,OAAOC,MAAc,WCDrB,OAAOC,MAAU,OCAjB,OAAOC,MAAU,OCAjB,OAAOC,MAAU,OACjB,OAAS,iBAAAC,MAAqB,MAE9B,IAAMC,EAAaD,EAAc,YAAY,GAAG,EAC1CE,EAAWH,EAAK,QAAQE,CAAU,EAC3BE,EAAWJ,EAAK,KAAKG,EAAU,QAAQ,EDHpD,OAAOE,MAAS,MAChB,OAAOC,MAAQ,WACf,OAAOC,MAAW,QAClB,OAAOC,MAAc,WAErB,eAAsBC,EAAgB,CACpC,YAAAC,EACA,WAAAC,CACF,EAGG,CACD,IAAMC,EAASC,EAAK,KAAKC,EAAU,eAAe,EAM5CC,EAAUV,EAAI,mBAAmBM;AAAA,CAAiB,EAAE,MAAM,EAChE,GAAIL,EAAG,WAAWK,CAAU,EAC1B,GAAIL,EAAG,YAAYK,CAAU,EAAE,SAAW,EACpCD,IAAgB,KAClBK,EAAQ,KACN,GAAGR,EAAM,KAAK,KACZG,CACF;AAAA,CACF,MACG,CACLK,EAAQ,eAAe,EACvB,GAAM,CAAE,aAAAC,CAAa,EAAI,MAAMR,EAAS,OAErC,CACD,KAAM,eACN,KAAM,OACN,QAAS,GAAGD,EAAM,UAAU,KAAK,UAAU,KAAKA,EAAM,KAAK,KACzDG,CACF,mEACA,QAAS,CACP,CACE,KAAM,mCACN,MAAO,QACP,MAAO,OACT,EACA,CACE,KAAM,gDACN,MAAO,QACP,MAAO,OACT,EACA,CACE,KAAM,wDACN,MAAO,YACP,MAAO,WACT,CACF,EACA,QAAS,OACX,CAAC,EACGM,IAAiB,UACnBD,EAAQ,KAAK,0BAA0B,EACvC,QAAQ,KAAK,CAAC,GAGhB,IAAME,EACJD,IAAiB,QACb,sBACA,8BAEA,CAAE,oBAAAE,CAAoB,EAAI,MAAMV,EAAS,OAE5C,CACD,KAAM,sBACN,KAAM,UACN,QAAS,4BAA4BS,KACrC,QAAS,EACX,CAAC,EAEIC,IACHH,EAAQ,KAAK,0BAA0B,EACvC,QAAQ,KAAK,CAAC,GAGZC,IAAiB,UACnBD,EAAQ,KACN,YAAYR,EAAM,KAAK,KAAKG,CAAW;AAAA,CACzC,EACAJ,EAAG,aAAaK,CAAU,GAIhC,QAAQ,IAAI,uDAAiDA,CAAU,EACvE,QAAQ,IAAI,mDAA6CC,CAAM,EAC/DN,EAAG,aAAaM,EAAQD,CAAU,CAEpC,CD3FA,eAAsBQ,EAAcC,EAAqB,CACvD,IAAMC,EAAaC,EAAK,QAAQ,QAAQ,IAAI,EAAGF,CAAW,EAE1D,MAAMG,EAAgB,CAAE,YAAAH,EAAa,WAAAC,CAAW,CAAC,CACnD,CGPA,OAAOG,MAAgB,OAChB,IAAMC,EAAoBC,GAAkB,CACjD,IAAMC,EAAQD,EAAM,MAAM,GAAG,EAEzBE,EAAUD,EAAMA,EAAM,OAAS,CAAC,EAGpC,GAAIC,IAAY,IAAK,CACnB,IAAMC,EAAYL,EAAW,QAAQ,QAAQ,IAAI,CAAC,EAClDI,EAAUJ,EAAW,SAASK,CAAS,EAIzC,IAAMC,EAAmBH,EAAM,UAAWI,GAAMA,EAAE,WAAW,GAAG,CAAC,EAC7DJ,EAAM,UAAWI,GAAMA,EAAE,WAAW,GAAG,CAAC,IAAM,KAChDH,EAAUD,EAAM,MAAMG,CAAgB,EAAE,KAAK,GAAG,GAGlD,IAAME,EAAOL,EAAM,OAAQI,GAAM,CAACA,EAAE,WAAW,GAAG,CAAC,EAAE,KAAK,GAAG,EAE7D,MAAO,CAACH,EAASI,CAAI,CACvB,EJdA,eAAsBC,GAAS,CACb,IAAIC,EAAQ,EAAE,KAAK,QAAQ,EAExC,YACC,iGACF,EAEC,MAAM,QAAQ,IAAI,EAErB,IAAMC,EAAc,MAAMC,EAAc,EAElC,CAACC,EAASC,CAAI,EAAIC,EAAiBJ,CAAW,EAEpDK,EAAcH,CAAO,CACvB,CACA,IAAMD,EAAgB,SAA6B,CACjD,GAAM,CAAE,QAAAC,CAAQ,EAAI,MAAMI,EAAS,OAAoC,CACrE,KAAM,UACN,KAAM,QACN,QAAS,oCACT,QAAS,SAET,YAAcC,GACLA,EAAM,KAAK,CAEtB,CAAC,EAED,OAAOL,CACT,EKjCA,eAAeM,GAAO,CACpB,MAAMC,EAAO,CACf,CAEAD,EAAK","names":["Command","inquirer","path","path","path","fileURLToPath","__filename","distPath","PKG_ROOT","ora","fs","chalk","inquirer","scaffoldProject","projectName","projectDir","srcDir","path","PKG_ROOT","spinner","overwriteDir","overwriteAction","confirmOverwriteDir","createProject","projectName","projectDir","path","scaffoldProject","pathModule","parseNameAndPath","input","paths","appName","parsedCwd","indexOfDelimiter","p","path","runCli","Command","projectName","promptAppName","appName","path","parseNameAndPath","createProject","inquirer","input","main","runCli"]}