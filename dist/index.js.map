{"version":3,"sources":["../src/index.ts","../src/consts.ts","../src/utils/getPackageIndex.ts","../src/helpers/updateIndex.ts","../src/helpers/packages.ts","../src/packages/fastify/index.ts"],"sourcesContent":["import inquirer from \"inquirer\";\nimport path from \"path\";\nimport fs from \"fs-extra\";\nimport chalk from \"chalk\";\nimport { baseTemplateDirectory, templateDirectory } from \"./consts.js\";\nimport getPackageIndex from \"./utils/getPackageIndex.js\";\nimport { updateIndex } from \"./helpers/updateIndex.js\";\nimport { getPackageJson } from \"./helpers/packages.js\";\nimport { requiredFastifyPackages } from \"./packages/fastify/index.js\";\n\nexport type AppOptions = {\n    projectName: string;\n    packages: string[];\n    templateDirectory: string;\n    userDirectory: string;\n};\n\nasync function main() {\n    const options: AppOptions = {\n        projectName: \"jstack\",\n        packages: [],\n        userDirectory: path.resolve(process.cwd(), \"jstack\"),\n        templateDirectory\n    };\n\n\n\n    const { projectName } = await inquirer.prompt<{ projectName: string; }>({\n        name: \"projectName\",\n        type: \"input\",\n        message: \"What will your project be called?\",\n        default: \"jstack\",\n        transformer: (input) => {\n            return input.trim();\n        }\n    });\n\n    options.userDirectory = path.resolve(process.cwd(), projectName);\n\n    if (fs.existsSync(options.userDirectory)) {\n        if (fs.readdirSync(options.userDirectory).length === 0) {\n            if (projectName !== \".\")\n                console.log(`${projectName} exists but is empty, continuing...`);\n        } else {\n            const { overwrite } = await inquirer.prompt<{ overwrite: boolean; }>({\n                name: \"overwrite\",\n                type: \"confirm\",\n                message: `${projectName} exists and is not empty. Overwrite?`,\n                default: false\n            });\n            if (!overwrite) {\n                console.log(\"Aborting.\");\n                process.exit(1);\n            }\n            await fs.emptyDir(options.userDirectory);\n        }\n    }\n    try {\n        fs.copySync(baseTemplateDirectory, options.userDirectory);\n    } catch (e) {\n        console.error(e);\n        process.exit(1);\n    }\n\n\n    options.packages = (await inquirer.prompt<{ optIns: string[]; }>({\n        name: \"optIns\",\n        type: \"checkbox\",\n        message: \"What would you like to include?\",\n        choices: [\n            \"Fastify\",\n            \"Discord.js\",\n            \"Prisma\"\n        ],\n    })).optIns.map((e) => e.toLowerCase());\n\n    //remove the packages from the list for now\n    if (options.packages.includes(\"Discord.js\")) {\n        console.log(\"Dicord.js not implemented yet, skipping...\");\n        options.packages = options.packages.filter((e) => e !== \"Discord.js\");\n    }\n    if (options.packages.includes(\"Prisma\")) {\n        console.log(\"Prisma not implemented yet, skipping...\");\n        options.packages = options.packages.filter((e) => e !== \"Prisma\");\n    }\n\n    //TODO: add the packages to the package.json\n    const currentPckg = await fs.readJSON(path.join(options.userDirectory, \"package.json\"));\n    if (options.packages.includes(\"fastify\")) {\n        const deps = requiredFastifyPackages;\n        fs.writeJSONSync(path.join(options.userDirectory, \"package.json\"), {\n            ...currentPckg,\n            dependencies: {\n                ...currentPckg.dependencies,\n                ...deps.dependencies\n            }\n        });\n    }\n    //TODO: Find and move the correct index.ts file\n    updateIndex(options);\n\n    void finished(projectName);\n}\nawait main();\n\n\nasync function finished(projectName: string) {\n    console.log(`${chalk.green(`cd ${projectName}`)}`);\n    process.exit(0);\n};\n","import path from \"path\";\r\nimport { fileURLToPath } from \"url\";\r\n\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = path.dirname(__filename);\r\nexport const templateDirectory = path.join(__dirname, \"../template\");\r\nexport const baseTemplateDirectory = path.join(templateDirectory, \"base\");","import { AppOptions } from \"../index.js\";\n\nexport default function getPackageIndex(options: AppOptions): string {\n    const includeFastify = options.packages.includes(\"fastify\");\n    const includeDiscord = options.packages.includes(\"discord.js\");\n    const includePrisma = options.packages.includes(\"prisma\");\n\n    if (includeFastify) {\n        return `${options.templateDirectory}/index/with_fastify.ts`;\n    }\n    else return \"\";\n}","import getPackageIndex from \"../utils/getPackageIndex.js\";\nimport fs from \"fs-extra\";\nimport path from \"path\";\nimport { AppOptions } from \"../index.js\";\nexport function updateIndex(options: AppOptions): void {\n    const index = getPackageIndex(options);\n    if (index) {\n        fs.removeSync(path.join(options.userDirectory, \"src/index.ts\"));\n        fs.copyFileSync(index, path.join(options.userDirectory, \"src/index.ts\"));\n    }\n}","export const extraPackages = {\n    dependencies: {\n        \"fastify\": \"^4.13.0\",\n        \"discord.js\": \"^13.0.0-dev.163e9b9.163e9b9\",\n        \"prisma\": \"^3.0.2\",\n    },\n    devDependencies: {\n\n    }\n};\n\nexport type ExtraPackages = typeof extraPackages;\nexport type KeyOrKeyArray<K extends keyof ExtraPackages> =\n    | keyof ExtraPackages[K]\n    | (keyof ExtraPackages[K])[];\n// Path: src\\packages\\fastify\\index.ts\n\nexport function getPackageJson(packages: { [K in keyof ExtraPackages]?: KeyOrKeyArray<K> }) {\n    const devDependencies: { [K in keyof ExtraPackages[\"devDependencies\"]]?: string } = {};\n    const dependencies: { [K in keyof ExtraPackages[\"dependencies\"]]?: string } = {};\n    for (const dependencyType in packages) {\n        const pckge = packages[dependencyType as keyof typeof packages];\n        if (dependencyType === \"dependencies\") {\n            dependencies[pckge as keyof typeof packages.devDependencies] = extraPackages.dependencies[pckge as keyof typeof extraPackages.devDependencies];\n        } else {\n            devDependencies[pckge as keyof typeof packages.devDependencies] = extraPackages.devDependencies[pckge as keyof typeof extraPackages.devDependencies];\n        }\n    }\n    return { devDependencies, dependencies };\n}\n\n\nexport type IExpectedPackages = ReturnType<typeof getPackageJson>;","import { ExtraPackages, getPackageJson, IExpectedPackages, KeyOrKeyArray } from \"../../helpers/packages.js\";\n\nexport const requiredFastifyPackages: IExpectedPackages = getPackageJson({\n    dependencies: \"fastify\",\n});\n"],"mappings":";AAAA,OAAO,cAAc;AACrB,OAAOA,WAAU;AACjB,OAAOC,SAAQ;AACf,OAAO,WAAW;;;ACHlB,OAAO,UAAU;AACjB,SAAS,qBAAqB;AAE9B,IAAM,aAAa,cAAc,YAAY,GAAG;AAChD,IAAM,YAAY,KAAK,QAAQ,UAAU;AAClC,IAAM,oBAAoB,KAAK,KAAK,WAAW,aAAa;AAC5D,IAAM,wBAAwB,KAAK,KAAK,mBAAmB,MAAM;;;ACJzD,SAAR,gBAAiC,SAA6B;AACjE,QAAM,iBAAiB,QAAQ,SAAS,SAAS,SAAS;AAC1D,QAAM,iBAAiB,QAAQ,SAAS,SAAS,YAAY;AAC7D,QAAM,gBAAgB,QAAQ,SAAS,SAAS,QAAQ;AAExD,MAAI,gBAAgB;AAChB,WAAO,GAAG,QAAQ;AAAA,EACtB;AACK,WAAO;AAChB;;;ACVA,OAAO,QAAQ;AACf,OAAOC,WAAU;AAEV,SAAS,YAAY,SAA2B;AACnD,QAAM,QAAQ,gBAAgB,OAAO;AACrC,MAAI,OAAO;AACP,OAAG,WAAWA,MAAK,KAAK,QAAQ,eAAe,cAAc,CAAC;AAC9D,OAAG,aAAa,OAAOA,MAAK,KAAK,QAAQ,eAAe,cAAc,CAAC;AAAA,EAC3E;AACJ;;;ACVO,IAAM,gBAAgB;AAAA,EACzB,cAAc;AAAA,IACV,WAAW;AAAA,IACX,cAAc;AAAA,IACd,UAAU;AAAA,EACd;AAAA,EACA,iBAAiB,CAEjB;AACJ;AAQO,SAAS,eAAe,UAA6D;AACxF,QAAM,kBAA8E,CAAC;AACrF,QAAM,eAAwE,CAAC;AAC/E,aAAW,kBAAkB,UAAU;AACnC,UAAM,QAAQ,SAAS,cAAuC;AAC9D,QAAI,mBAAmB,gBAAgB;AACnC,mBAAa,KAA8C,IAAI,cAAc,aAAa,KAAmD;AAAA,IACjJ,OAAO;AACH,sBAAgB,KAA8C,IAAI,cAAc,gBAAgB,KAAmD;AAAA,IACvJ;AAAA,EACJ;AACA,SAAO,EAAE,iBAAiB,aAAa;AAC3C;;;AC3BO,IAAM,0BAA6C,eAAe;AAAA,EACrE,cAAc;AAClB,CAAC;;;ALaD,eAAe,OAAO;AAClB,QAAM,UAAsB;AAAA,IACxB,aAAa;AAAA,IACb,UAAU,CAAC;AAAA,IACX,eAAeC,MAAK,QAAQ,QAAQ,IAAI,GAAG,QAAQ;AAAA,IACnD;AAAA,EACJ;AAIA,QAAM,EAAE,YAAY,IAAI,MAAM,SAAS,OAAiC;AAAA,IACpE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,SAAS;AAAA,IACT,aAAa,CAAC,UAAU;AACpB,aAAO,MAAM,KAAK;AAAA,IACtB;AAAA,EACJ,CAAC;AAED,UAAQ,gBAAgBA,MAAK,QAAQ,QAAQ,IAAI,GAAG,WAAW;AAE/D,MAAIC,IAAG,WAAW,QAAQ,aAAa,GAAG;AACtC,QAAIA,IAAG,YAAY,QAAQ,aAAa,EAAE,WAAW,GAAG;AACpD,UAAI,gBAAgB;AAChB,gBAAQ,IAAI,GAAG,gDAAgD;AAAA,IACvE,OAAO;AACH,YAAM,EAAE,UAAU,IAAI,MAAM,SAAS,OAAgC;AAAA,QACjE,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS,GAAG;AAAA,QACZ,SAAS;AAAA,MACb,CAAC;AACD,UAAI,CAAC,WAAW;AACZ,gBAAQ,IAAI,WAAW;AACvB,gBAAQ,KAAK,CAAC;AAAA,MAClB;AACA,YAAMA,IAAG,SAAS,QAAQ,aAAa;AAAA,IAC3C;AAAA,EACJ;AACA,MAAI;AACA,IAAAA,IAAG,SAAS,uBAAuB,QAAQ,aAAa;AAAA,EAC5D,SAAS,GAAP;AACE,YAAQ,MAAM,CAAC;AACf,YAAQ,KAAK,CAAC;AAAA,EAClB;AAGA,UAAQ,YAAY,MAAM,SAAS,OAA8B;AAAA,IAC7D,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,SAAS;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ,CAAC,GAAG,OAAO,IAAI,CAAC,MAAM,EAAE,YAAY,CAAC;AAGrC,MAAI,QAAQ,SAAS,SAAS,YAAY,GAAG;AACzC,YAAQ,IAAI,4CAA4C;AACxD,YAAQ,WAAW,QAAQ,SAAS,OAAO,CAAC,MAAM,MAAM,YAAY;AAAA,EACxE;AACA,MAAI,QAAQ,SAAS,SAAS,QAAQ,GAAG;AACrC,YAAQ,IAAI,yCAAyC;AACrD,YAAQ,WAAW,QAAQ,SAAS,OAAO,CAAC,MAAM,MAAM,QAAQ;AAAA,EACpE;AAGA,QAAM,cAAc,MAAMA,IAAG,SAASD,MAAK,KAAK,QAAQ,eAAe,cAAc,CAAC;AACtF,MAAI,QAAQ,SAAS,SAAS,SAAS,GAAG;AACtC,UAAM,OAAO;AACb,IAAAC,IAAG,cAAcD,MAAK,KAAK,QAAQ,eAAe,cAAc,GAAG;AAAA,MAC/D,GAAG;AAAA,MACH,cAAc;AAAA,QACV,GAAG,YAAY;AAAA,QACf,GAAG,KAAK;AAAA,MACZ;AAAA,IACJ,CAAC;AAAA,EACL;AAEA,cAAY,OAAO;AAEnB,OAAK,SAAS,WAAW;AAC7B;AACA,MAAM,KAAK;AAGX,eAAe,SAAS,aAAqB;AACzC,UAAQ,IAAI,GAAG,MAAM,MAAM,MAAM,aAAa,GAAG;AACjD,UAAQ,KAAK,CAAC;AAClB;","names":["path","fs","path","path","fs"]}