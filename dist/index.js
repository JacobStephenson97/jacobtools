import{Command as j}from"commander";import A from"inquirer";import x from"path";import b from"path";import c from"path";import{fileURLToPath as w}from"url";var h=w(import.meta.url),v=c.dirname(h),p=c.join(v,"../../");import P from"ora";import a from"fs-extra";import s from"chalk";import m from"inquirer";async function l({projectName:r,projectDir:t}){let e=b.join(p,"template/base"),i=P(`Scaffolding in: ${t}...
`).start();if(a.existsSync(t))if(a.readdirSync(t).length===0)r!=="."&&i.info(`${s.cyan.bold(r)} exists but is empty, continuing...
`);else{i.stopAndPersist();let{overwriteDir:n}=await m.prompt({name:"overwriteDir",type:"list",message:`${s.redBright.bold("Warning:")} ${s.cyan.bold(r)} already exists and isn't empty. How would you like to proceed?`,choices:[{name:"Abort installation (recommended)",value:"abort",short:"Abort"},{name:"Clear the directory and continue installation",value:"clear",short:"Clear"},{name:"Continue installation and overwrite conflicting files",value:"overwrite",short:"Overwrite"}],default:"abort"});n==="abort"&&(i.fail("Aborting installation..."),process.exit(1));let o=n==="clear"?"clear the directory":"overwrite conflicting files",{confirmOverwriteDir:y}=await m.prompt({name:"confirmOverwriteDir",type:"confirm",message:`Are you sure you want to ${o}?`,default:!1});y||(i.fail("Aborting installation..."),process.exit(1)),n==="clear"&&(i.info(`Emptying ${s.cyan.bold(r)} and creating t3 app..
`),a.emptyDirSync(t))}console.log("\u{1F680} ~ file: scaffoldProject.ts:22 ~ projectDir",t),console.log("\u{1F680} ~ file: scaffoldProject.ts:22 ~ srcDir",e),a.copyFileSync(e,t)}async function f(r){let t=x.resolve(process.cwd(),r);await l({projectName:r,projectDir:t})}import d from"path";var u=r=>{let t=r.split("/"),e=t[t.length-1];if(e==="."){let o=d.resolve(process.cwd());e=d.basename(o)}let i=t.findIndex(o=>o.startsWith("@"));t.findIndex(o=>o.startsWith("@"))!==-1&&(e=t.slice(i).join("/"));let n=t.filter(o=>!o.startsWith("@")).join("/");return[e,n]};async function g(){new j().name("jstack").description("A CLI to generate a nodejs project using typescript, with options for more specialized projects").parse(process.argv);let t=await C(),[e,i]=u(t);f(e)}var C=async()=>{let{appName:r}=await A.prompt({name:"appName",type:"input",message:"What will your project be called?",default:"jstack",transformer:t=>t.trim()});return r};async function O(){await g()}O();
//# sourceMappingURL=index.js.map